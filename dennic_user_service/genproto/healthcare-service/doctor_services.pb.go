// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/doctor_services.proto

package healthcare

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DoctorServices struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	DoctorServiceOrder   int32    `protobuf:"varint,2,opt,name=doctor_service_order,json=doctorServiceOrder,proto3" json:"doctor_service_order"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	SpecializationId     string   `protobuf:"bytes,4,opt,name=specialization_id,json=specializationId,proto3" json:"specialization_id"`
	OnlinePrice          float32  `protobuf:"fixed32,5,opt,name=online_price,json=onlinePrice,proto3" json:"online_price"`
	OfflinePrice         float32  `protobuf:"fixed32,6,opt,name=offline_price,json=offlinePrice,proto3" json:"offline_price"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name"`
	Duration             string   `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorServices) Reset()         { *m = DoctorServices{} }
func (m *DoctorServices) String() string { return proto.CompactTextString(m) }
func (*DoctorServices) ProtoMessage()    {}
func (*DoctorServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a1dacb2d8172e2, []int{0}
}
func (m *DoctorServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorServices.Merge(m, src)
}
func (m *DoctorServices) XXX_Size() int {
	return m.Size()
}
func (m *DoctorServices) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorServices.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorServices proto.InternalMessageInfo

func (m *DoctorServices) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DoctorServices) GetDoctorServiceOrder() int32 {
	if m != nil {
		return m.DoctorServiceOrder
	}
	return 0
}

func (m *DoctorServices) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorServices) GetSpecializationId() string {
	if m != nil {
		return m.SpecializationId
	}
	return ""
}

func (m *DoctorServices) GetOnlinePrice() float32 {
	if m != nil {
		return m.OnlinePrice
	}
	return 0
}

func (m *DoctorServices) GetOfflinePrice() float32 {
	if m != nil {
		return m.OfflinePrice
	}
	return 0
}

func (m *DoctorServices) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DoctorServices) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *DoctorServices) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorServices) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorServices) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListDoctorServices struct {
	DoctorServices       []*DoctorServices `protobuf:"bytes,1,rep,name=doctorServices,proto3" json:"doctorServices"`
	Count                int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListDoctorServices) Reset()         { *m = ListDoctorServices{} }
func (m *ListDoctorServices) String() string { return proto.CompactTextString(m) }
func (*ListDoctorServices) ProtoMessage()    {}
func (*ListDoctorServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a1dacb2d8172e2, []int{1}
}
func (m *ListDoctorServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDoctorServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDoctorServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDoctorServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDoctorServices.Merge(m, src)
}
func (m *ListDoctorServices) XXX_Size() int {
	return m.Size()
}
func (m *ListDoctorServices) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDoctorServices.DiscardUnknown(m)
}

var xxx_messageInfo_ListDoctorServices proto.InternalMessageInfo

func (m *ListDoctorServices) GetDoctorServices() []*DoctorServices {
	if m != nil {
		return m.DoctorServices
	}
	return nil
}

func (m *ListDoctorServices) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetReqStr struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	IsActive             bool     `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	IsHardDeleted        bool     `protobuf:"varint,3,opt,name=is_hard_deleted,json=isHardDeleted,proto3" json:"is_hard_deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqStr) Reset()         { *m = GetReqStr{} }
func (m *GetReqStr) String() string { return proto.CompactTextString(m) }
func (*GetReqStr) ProtoMessage()    {}
func (*GetReqStr) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a1dacb2d8172e2, []int{2}
}
func (m *GetReqStr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqStr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqStr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqStr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqStr.Merge(m, src)
}
func (m *GetReqStr) XXX_Size() int {
	return m.Size()
}
func (m *GetReqStr) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqStr.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqStr proto.InternalMessageInfo

func (m *GetReqStr) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetReqStr) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetReqStr) GetIsHardDeleted() bool {
	if m != nil {
		return m.IsHardDeleted
	}
	return false
}

type GetAllDoctorServiceS struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Search               string   `protobuf:"bytes,3,opt,name=search,proto3" json:"search"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDoctorServiceS) Reset()         { *m = GetAllDoctorServiceS{} }
func (m *GetAllDoctorServiceS) String() string { return proto.CompactTextString(m) }
func (*GetAllDoctorServiceS) ProtoMessage()    {}
func (*GetAllDoctorServiceS) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a1dacb2d8172e2, []int{3}
}
func (m *GetAllDoctorServiceS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllDoctorServiceS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllDoctorServiceS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllDoctorServiceS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDoctorServiceS.Merge(m, src)
}
func (m *GetAllDoctorServiceS) XXX_Size() int {
	return m.Size()
}
func (m *GetAllDoctorServiceS) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDoctorServiceS.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDoctorServiceS proto.InternalMessageInfo

func (m *GetAllDoctorServiceS) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllDoctorServiceS) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllDoctorServiceS) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a1dacb2d8172e2, []int{4}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*DoctorServices)(nil), "healthcare.DoctorServices")
	proto.RegisterType((*ListDoctorServices)(nil), "healthcare.ListDoctorServices")
	proto.RegisterType((*GetReqStr)(nil), "healthcare.GetReqStr")
	proto.RegisterType((*GetAllDoctorServiceS)(nil), "healthcare.GetAllDoctorServiceS")
	proto.RegisterType((*Status)(nil), "healthcare.Status")
}

func init() {
	proto.RegisterFile("healthcare-service/doctor_services.proto", fileDescriptor_05a1dacb2d8172e2)
}

var fileDescriptor_05a1dacb2d8172e2 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0x13, 0xec, 0x49, 0x1b, 0xca, 0x10, 0x90, 0x95, 0x8a, 0xc8, 0x04, 0x09, 0x45,
	0x42, 0x04, 0x54, 0x2e, 0x40, 0x42, 0xa4, 0x12, 0x09, 0x15, 0xe4, 0x08, 0x89, 0x37, 0xb3, 0x78,
	0xb7, 0x64, 0x25, 0xd7, 0x0e, 0xbb, 0x9b, 0x4a, 0x70, 0x11, 0x38, 0x12, 0x8f, 0x1c, 0x01, 0x85,
	0x13, 0x70, 0x03, 0xe4, 0xd9, 0x2d, 0x8d, 0xd3, 0x92, 0xa7, 0xbe, 0x79, 0xbe, 0xef, 0x9b, 0x9f,
	0xfd, 0x66, 0x64, 0x18, 0xcc, 0x05, 0xcb, 0xcc, 0x3c, 0x65, 0x4a, 0x3c, 0xd1, 0x42, 0x9d, 0xc9,
	0x54, 0x3c, 0xe5, 0x45, 0x6a, 0x0a, 0x95, 0xb8, 0x50, 0x0f, 0x17, 0xaa, 0x30, 0x05, 0xc2, 0x85,
	0xb2, 0xff, 0xa7, 0x06, 0xed, 0x09, 0xa9, 0x66, 0x4e, 0x84, 0x6d, 0xa8, 0x49, 0x1e, 0x7a, 0x91,
	0x37, 0x08, 0xe2, 0x9a, 0xe4, 0xf8, 0x0c, 0x3a, 0xd5, 0x3a, 0x49, 0xa1, 0xb8, 0x50, 0x61, 0x2d,
	0xf2, 0x06, 0x8d, 0x18, 0xf9, 0x7a, 0xf6, 0x9b, 0x92, 0xc1, 0x03, 0x08, 0x5c, 0x86, 0xe4, 0x61,
	0x9d, 0x0a, 0xf9, 0x16, 0x98, 0x72, 0x7c, 0x0c, 0xb7, 0xf5, 0x42, 0xa4, 0x92, 0x65, 0xf2, 0x2b,
	0x33, 0xb2, 0xc8, 0x4b, 0xd1, 0x0e, 0x89, 0xf6, 0xab, 0xc4, 0x94, 0xe3, 0x03, 0xd8, 0x2d, 0xf2,
	0x4c, 0xe6, 0x22, 0x59, 0x28, 0x99, 0x8a, 0xb0, 0x11, 0x79, 0x83, 0x5a, 0xdc, 0xb2, 0xd8, 0xdb,
	0x12, 0xc2, 0x87, 0xb0, 0x57, 0x9c, 0x9c, 0xac, 0x69, 0x9a, 0xa4, 0xd9, 0x75, 0xa0, 0x15, 0x21,
	0xec, 0xe4, 0xec, 0x54, 0x84, 0x37, 0xa9, 0x0f, 0x7d, 0x63, 0x17, 0x7c, 0xbe, 0x54, 0xd4, 0x29,
	0xf4, 0xdd, 0x90, 0x2e, 0xc6, 0xfb, 0x00, 0xa9, 0x12, 0xcc, 0x08, 0x9e, 0x30, 0x13, 0x06, 0xc4,
	0x06, 0x0e, 0x19, 0x99, 0x92, 0x5e, 0x2e, 0xf8, 0x39, 0x0d, 0x96, 0x76, 0x88, 0xa5, 0xb9, 0xc8,
	0x84, 0xa3, 0x5b, 0x96, 0x76, 0xc8, 0xc8, 0xf4, 0x73, 0xc0, 0xd7, 0x52, 0x9b, 0x0d, 0xdb, 0xc7,
	0xd0, 0xae, 0x58, 0xa9, 0x43, 0x2f, 0xaa, 0x0f, 0x5a, 0x87, 0xdd, 0xe1, 0xc5, 0xba, 0x86, 0xd5,
	0x9c, 0x78, 0x23, 0x03, 0x3b, 0xd0, 0x48, 0x8b, 0x65, 0x6e, 0xdc, 0x6e, 0x6c, 0xd0, 0xff, 0x00,
	0xc1, 0x91, 0x30, 0xb1, 0xf8, 0x3c, 0x33, 0xea, 0xd2, 0x76, 0x0f, 0x20, 0x90, 0x3a, 0x61, 0xa9,
	0x91, 0x67, 0x82, 0xd2, 0xfc, 0xd8, 0x97, 0x7a, 0x44, 0x31, 0x3e, 0x82, 0x5b, 0x52, 0x27, 0x73,
	0xa6, 0x78, 0xe2, 0xc6, 0xa7, 0x75, 0xfa, 0xf1, 0x9e, 0xd4, 0xaf, 0x98, 0xe2, 0x13, 0x0b, 0xf6,
	0xdf, 0x43, 0xe7, 0x48, 0x98, 0x51, 0x96, 0x55, 0xe6, 0x9b, 0x95, 0xb6, 0x2f, 0xd8, 0x27, 0x41,
	0xed, 0xea, 0x31, 0x7d, 0x97, 0x33, 0x66, 0xf2, 0x54, 0xda, 0x19, 0xeb, 0xb1, 0x0d, 0xf0, 0x1e,
	0x34, 0xb5, 0x60, 0x2a, 0x9d, 0xbb, 0x7b, 0x71, 0x51, 0x3f, 0x82, 0xe6, 0xcc, 0x30, 0xb3, 0xd4,
	0xa4, 0xa0, 0x2f, 0xaa, 0xe6, 0xc7, 0x2e, 0x3a, 0xfc, 0x56, 0x3f, 0xbf, 0x60, 0xed, 0xfa, 0xe2,
	0x31, 0x74, 0x5e, 0xd2, 0xae, 0x36, 0x2c, 0xde, 0x62, 0x65, 0x77, 0x0b, 0x87, 0x53, 0x7a, 0x5e,
	0x05, 0x1c, 0x7f, 0x99, 0x4e, 0xf0, 0xee, 0x7a, 0xce, 0x3f, 0x8b, 0xb7, 0x96, 0xba, 0xda, 0x29,
	0x8d, 0xd1, 0x46, 0xa9, 0x4b, 0x5e, 0x76, 0x7b, 0xeb, 0x8a, 0x2b, 0xee, 0xe7, 0x18, 0x3a, 0xef,
	0xe8, 0x02, 0xaf, 0xe9, 0xd1, 0x2f, 0xe0, 0x8e, 0x5d, 0x6f, 0x05, 0xff, 0xdf, 0x9b, 0x71, 0x1d,
	0xb6, 0x1b, 0x1b, 0xef, 0xff, 0x58, 0xf5, 0xbc, 0x9f, 0xab, 0x9e, 0xf7, 0x6b, 0xd5, 0xf3, 0xbe,
	0xff, 0xee, 0xdd, 0xf8, 0xd8, 0xa4, 0x1f, 0xd0, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4,
	0xab, 0x83, 0xdb, 0xac, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoctorsServiceClient is the client API for DoctorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorsServiceClient interface {
	CreateDoctorServices(ctx context.Context, in *DoctorServices, opts ...grpc.CallOption) (*DoctorServices, error)
	GetDoctorServiceByID(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*DoctorServices, error)
	GetAllDoctorServices(ctx context.Context, in *GetAllDoctorServiceS, opts ...grpc.CallOption) (*ListDoctorServices, error)
	UpdateDoctorServices(ctx context.Context, in *DoctorServices, opts ...grpc.CallOption) (*DoctorServices, error)
	DeleteDoctorService(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Status, error)
}

type doctorsServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorsServiceClient(cc *grpc.ClientConn) DoctorsServiceClient {
	return &doctorsServiceClient{cc}
}

func (c *doctorsServiceClient) CreateDoctorServices(ctx context.Context, in *DoctorServices, opts ...grpc.CallOption) (*DoctorServices, error) {
	out := new(DoctorServices)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorsService/CreateDoctorServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorsServiceClient) GetDoctorServiceByID(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*DoctorServices, error) {
	out := new(DoctorServices)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorsService/GetDoctorServiceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorsServiceClient) GetAllDoctorServices(ctx context.Context, in *GetAllDoctorServiceS, opts ...grpc.CallOption) (*ListDoctorServices, error) {
	out := new(ListDoctorServices)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorsService/GetAllDoctorServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorsServiceClient) UpdateDoctorServices(ctx context.Context, in *DoctorServices, opts ...grpc.CallOption) (*DoctorServices, error) {
	out := new(DoctorServices)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorsService/UpdateDoctorServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorsServiceClient) DeleteDoctorService(ctx context.Context, in *GetReqStr, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorsService/DeleteDoctorService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorsServiceServer is the server API for DoctorsService service.
type DoctorsServiceServer interface {
	CreateDoctorServices(context.Context, *DoctorServices) (*DoctorServices, error)
	GetDoctorServiceByID(context.Context, *GetReqStr) (*DoctorServices, error)
	GetAllDoctorServices(context.Context, *GetAllDoctorServiceS) (*ListDoctorServices, error)
	UpdateDoctorServices(context.Context, *DoctorServices) (*DoctorServices, error)
	DeleteDoctorService(context.Context, *GetReqStr) (*Status, error)
}

// UnimplementedDoctorsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorsServiceServer struct {
}

func (*UnimplementedDoctorsServiceServer) CreateDoctorServices(ctx context.Context, req *DoctorServices) (*DoctorServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorServices not implemented")
}
func (*UnimplementedDoctorsServiceServer) GetDoctorServiceByID(ctx context.Context, req *GetReqStr) (*DoctorServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorServiceByID not implemented")
}
func (*UnimplementedDoctorsServiceServer) GetAllDoctorServices(ctx context.Context, req *GetAllDoctorServiceS) (*ListDoctorServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctorServices not implemented")
}
func (*UnimplementedDoctorsServiceServer) UpdateDoctorServices(ctx context.Context, req *DoctorServices) (*DoctorServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorServices not implemented")
}
func (*UnimplementedDoctorsServiceServer) DeleteDoctorService(ctx context.Context, req *GetReqStr) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorService not implemented")
}

func RegisterDoctorsServiceServer(s *grpc.Server, srv DoctorsServiceServer) {
	s.RegisterService(&_DoctorsService_serviceDesc, srv)
}

func _DoctorsService_CreateDoctorServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).CreateDoctorServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorsService/CreateDoctorServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).CreateDoctorServices(ctx, req.(*DoctorServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorsService_GetDoctorServiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).GetDoctorServiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorsService/GetDoctorServiceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).GetDoctorServiceByID(ctx, req.(*GetReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorsService_GetAllDoctorServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDoctorServiceS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).GetAllDoctorServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorsService/GetAllDoctorServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).GetAllDoctorServices(ctx, req.(*GetAllDoctorServiceS))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorsService_UpdateDoctorServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).UpdateDoctorServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorsService/UpdateDoctorServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).UpdateDoctorServices(ctx, req.(*DoctorServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorsService_DeleteDoctorService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).DeleteDoctorService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorsService/DeleteDoctorService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).DeleteDoctorService(ctx, req.(*GetReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.DoctorsService",
	HandlerType: (*DoctorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorServices",
			Handler:    _DoctorsService_CreateDoctorServices_Handler,
		},
		{
			MethodName: "GetDoctorServiceByID",
			Handler:    _DoctorsService_GetDoctorServiceByID_Handler,
		},
		{
			MethodName: "GetAllDoctorServices",
			Handler:    _DoctorsService_GetAllDoctorServices_Handler,
		},
		{
			MethodName: "UpdateDoctorServices",
			Handler:    _DoctorsService_UpdateDoctorServices_Handler,
		},
		{
			MethodName: "DeleteDoctorService",
			Handler:    _DoctorsService_DeleteDoctorService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/doctor_services.proto",
}

func (m *DoctorServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OfflinePrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OfflinePrice))))
		i--
		dAtA[i] = 0x35
	}
	if m.OnlinePrice != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.OnlinePrice))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.SpecializationId) > 0 {
		i -= len(m.SpecializationId)
		copy(dAtA[i:], m.SpecializationId)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.SpecializationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DoctorServiceOrder != 0 {
		i = encodeVarintDoctorServices(dAtA, i, uint64(m.DoctorServiceOrder))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDoctorServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDoctorServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDoctorServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintDoctorServices(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DoctorServices) > 0 {
		for iNdEx := len(m.DoctorServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDoctorServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetReqStr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqStr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqStr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHardDeleted {
		i--
		if m.IsHardDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllDoctorServiceS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDoctorServiceS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllDoctorServiceS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintDoctorServices(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintDoctorServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintDoctorServices(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDoctorServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovDoctorServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DoctorServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	if m.DoctorServiceOrder != 0 {
		n += 1 + sovDoctorServices(uint64(m.DoctorServiceOrder))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	l = len(m.SpecializationId)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	if m.OnlinePrice != 0 {
		n += 5
	}
	if m.OfflinePrice != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDoctorServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DoctorServices) > 0 {
		for _, e := range m.DoctorServices {
			l = e.Size()
			n += 1 + l + sovDoctorServices(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctorServices(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReqStr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsHardDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllDoctorServiceS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovDoctorServices(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovDoctorServices(uint64(m.Limit))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovDoctorServices(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDoctorServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDoctorServices(x uint64) (n int) {
	return sovDoctorServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoctorServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorServiceOrder", wireType)
			}
			m.DoctorServiceOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorServiceOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecializationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecializationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlinePrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OnlinePrice = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflinePrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.OfflinePrice = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDoctorServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDoctorServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDoctorServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorServices = append(m.DoctorServices, &DoctorServices{})
			if err := m.DoctorServices[len(m.DoctorServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReqStr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqStr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqStr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHardDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHardDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllDoctorServiceS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDoctorServiceS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDoctorServiceS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDoctorServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDoctorServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDoctorServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDoctorServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDoctorServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDoctorServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDoctorServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDoctorServices = fmt.Errorf("proto: unexpected end of group")
)
